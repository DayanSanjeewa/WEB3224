# version: '3.6'
# services:
# #front-end app container configuration
#   springboot:
#    image: dayandock/springboot:1
#    environment:
#    - MONGO_DB_HOSTNAME=mongo
#    - MONGO_DB_USERNAME=devdb
#    - MONGO_DB_PASSWORD=devdb123
#    ports:
#    - 8081:8080
#    depends_on:
#    - mongo
#    networks:
#    - spappnetwork

# #back-end database container configuration
#   mongo:
#    image: mongo
#    environment:
#    - MONGO_INITDB_ROOT_USERNAME=devdb
#    - MONGO_INITDB_ROOT_PASSWORD=devdb123
#    volumes:
#    - myvol:/data/db
#    networks:
#    - spappnetwork
  
# volumes:
#   myvol:
#    driver: local
# networks:
#   spappnetwork:
#    driver: bridge


#==================== docker swarm ============================================
version: '3.6'
services:
#front-end app container configuration
  springboot:
   image: dayandock/springboot:1
   restart: always #This will be ignored if we deploy in docker swarm 
   environment:
   - MONGO_DB_HOSTNAME=mongo
   - MONGO_DB_USERNAME=devdb
   - MONGO_DB_PASSWORD=devdb123
   ports:
   - 8081:8080
   working_dir: /opt/app
   depends_on:
   - mongo
   deploy: #This will be considered only in docker swarm
     replicas: 2
     update_config:
       parallelism: 1
       delay: 20s
     restart_policy:
       condition: on-failure
       delay: 10s
       max_attempts: 5
   networks:
   - springdocker_swarm

#back-end database container configuration
  mongo:
   image: mongo
   environment:
   - MONGO_INITDB_ROOT_USERNAME=devdb
   - MONGO_INITDB_ROOT_PASSWORD=devdb123
   volumes:
   - myvol:/data/db
   networks:
   - springdocker_swarm
  
volumes:
  myvol:
   external: true
networks: #In docher swarm, it needs to use overlay network
  springdocker_swarm:
   driver: overlay
   external: true
     
      